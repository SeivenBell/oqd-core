============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /home/seiven/.local/share/mise/installs/python/3.13.2/bin/python
cachedir: .pytest_cache
rootdir: /home/seiven/Documents/Github/oqd-core
configfile: pyproject.toml
collecting ... collected 249 items

tests/test_analog/test_analysis.py::test_simple_single_term_pauli PASSED [  0%]
tests/test_analog/test_analysis.py::test_simple_single_term_ladder PASSED [  0%]
tests/test_analog/test_analysis.py::test_kron_add PASSED                 [  1%]
tests/test_analog/test_analysis.py::test_kron_single PASSED              [  1%]
tests/test_analog/test_analysis.py::test_kron_single_ladder PASSED       [  2%]
tests/test_analog/test_analysis.py::test_kron_single_complicated PASSED  [  2%]
tests/test_analog/test_analysis.py::test_kron_add_complicated PASSED     [  2%]
tests/test_analog/test_analysis.py::test_kron_add_complicated_with_scalar PASSED [  3%]
tests/test_analog/test_canonicalization_rules.py::test_operator_distribute_simple PASSED [  3%]
tests/test_analog/test_canonicalization_rules.py::test_operator_distribute_no_effect PASSED [  4%]
tests/test_analog/test_canonicalization_rules.py::test_gather_math_expr_simple PASSED [  4%]
tests/test_analog/test_canonicalization_rules.py::test_gather_math_expr_complicated PASSED [  4%]
tests/test_analog/test_canonicalization_rules.py::test_gather_math_expr_no_effect PASSED [  5%]
tests/test_analog/test_canonicalization_rules.py::test_proper_order_simple PASSED [  5%]
tests/test_analog/test_canonicalization_rules.py::test_proper_order_complicated PASSED [  6%]
tests/test_analog/test_canonicalization_rules.py::test_simple_pauli PASSED [  6%]
tests/test_analog/test_canonicalization_rules.py::test_nested_multiplications PASSED [  6%]
tests/test_analog/test_canonicalization_rules.py::test_nested_multiplications_complicated XFAIL [  7%]
tests/test_analog/test_canonicalization_rules.py::test_simple_pauli_gather PASSED [  7%]
tests/test_analog/test_canonicalization_rules.py::test_complicated_pauli_gather PASSED [  8%]
tests/test_analog/test_canonicalization_rules.py::test_normal_order_simple PASSED [  8%]
tests/test_analog/test_canonicalization_rules.py::test_normal_order_simple_fail PASSED [  8%]
tests/test_analog/test_canonicalization_rules.py::test_normal_order_inside_pauli PASSED [  9%]
tests/test_analog/test_canonicalization_rules.py::test_prune_identity_simple PASSED [  9%]
tests/test_analog/test_canonicalization_rules.py::test_prune_identity_simple_nested PASSED [ 10%]
tests/test_analog/test_canonicalization_rules.py::test_sorted_order_simple PASSED [ 10%]
tests/test_analog/test_canonicalization_rules.py::test_sorted_order_terminals PASSED [ 10%]
tests/test_analog/test_canonicalization_rules.py::test_sorted_order_ladder PASSED [ 11%]
tests/test_analog/test_canonicalization_rules.py::test_scale_terms_simple PASSED [ 11%]
tests/test_analog/test_canonicalization_rules.py::test_scale_terms_single_term PASSED [ 12%]
tests/test_analog/test_canonicalization_rules.py::test_scale_terms_terminals PASSED [ 12%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_pauli_simple_fail PASSED [ 12%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_pauli_ladder_simple_fail PASSED [ 13%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_pauli_simple_pass PASSED [ 13%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_pauli_ladder_simple_pass PASSED [ 14%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_pauli_nested_fail PASSED [ 14%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_pauli_nested_pass PASSED [ 14%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_nested_multiplication_pass PASSED [ 15%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_complex_nested_pass PASSED [ 15%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_complex_nested_fail PASSED [ 16%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_complex_pauli_fail PASSED [ 16%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_addition_pauli_scalar_multiple_simple PASSED [ 16%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_addition_pauli_scalar_multiple_nested PASSED [ 17%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_subtraction_pauli PASSED [ 17%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_multiplication_OperatorKron_distribution PASSED [ 18%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_multiplication_OperatorScalarMul_distribution_v1 PASSED [ 18%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_multiplication_OperatorScalarMul_distribution_v2 PASSED [ 18%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_multiplication_OperatorScalarMul_distribution_v3 PASSED [ 19%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_multiplication_OperatorScalarMul_distribution_v4 PASSED [ 19%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_multiplication_OperatorScalarMul_distribution_v5 PASSED [ 20%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationOperatorDistribute::test_multiplication_OperatorScalarMul_distribution_pass PASSED [ 20%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_pauli_simple_pass PASSED [ 20%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_pauli_simple_fail PASSED [ 21%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_pauli_simple_fail_one_term PASSED [ 21%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_pauli_complicated_pass PASSED [ 22%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_pauli_complicated_fail PASSED [ 22%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_addition_pauli_scalar_multiple_nested_fail PASSED [ 22%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_pauli_nested_ops_fail PASSED [ 23%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherMathExpr::test_pauli_ladder_nested_ops_pass PASSED [ 23%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_simple_pauli_pass PASSED [ 24%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_simple_pauli_fail PASSED [ 24%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_simple_pauli_with_other_ops_pass PASSED [ 24%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_simple_pauli_with_other_ops_fail PASSED [ 25%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_nested_paulis_fail_v1 PASSED [ 25%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_nested_paulis_pass_v2 PASSED [ 26%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_nested_paulis_pass_with_brackets PASSED [ 26%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_nested_paulis_pass_without_brackets PASSED [ 26%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_nested_tensor_prod_paulis_multiplication_fail PASSED [ 27%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationProperOrder::test_nested_tensor_prod_paulis_multiplication_pass PASSED [ 27%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPauliAlgebra::test_simple_pass PASSED [ 28%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPauliAlgebra::test_simple_fail PASSED [ 28%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPauliAlgebra::test_nested_pass PASSED [ 28%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPauliAlgebra::test_nested_fail PASSED [ 29%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPauliAlgebra::test_assumption_pass PASSED [ 29%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPauliAlgebra::test_assumption_pass_v2 PASSED [ 30%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_simple_pass PASSED [ 30%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_simple_fail PASSED [ 30%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_complicated_addition_pass PASSED [ 31%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_simple_adddition_fail PASSED [ 31%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_simple_addition_pass PASSED [ 32%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_assumption_addition_pass PASSED [ 32%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_assumption_nested_addition_pass PASSED [ 32%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_assumption_simple_nested_addition_pass PASSED [ 33%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_assumption_simple_nested_subtraction_pass PASSED [ 33%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_ladder_prod_fail PASSED [ 34%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationGatherPauli::test_ladder_prod_pass PASSED [ 34%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_pass PASSED [ 34%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_fail PASSED [ 35%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_pass_only_ladders PASSED [ 35%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_fail_only_ladders PASSED [ 36%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_addition_pass PASSED [ 36%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_addition_fail PASSED [ 36%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_starting_with_ladder_pass_v1 PASSED [ 37%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_starting_with_ladder_fail_v1 PASSED [ 37%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_starting_with_single_ladder_pass_v1 PASSED [ 38%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_simple_starting_with_single_ladder_tensors PASSED [ 38%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_assumption_only_ladder_addition_without_distribution PASSED [ 38%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_assumption_only_ladder_addition_with_distribution PASSED [ 39%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_terminal_ladder_normal_order PASSED [ 39%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationNormalOrder::test_just_terminal_ladder_normal_order PASSED [ 40%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPruneIdentity::test_simple_pass PASSED [ 40%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPruneIdentity::test_simple_addition_pass PASSED [ 40%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPruneIdentity::test_simple_fail PASSED [ 41%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationPruneIdentity::test_show_proper_order_not_needed PASSED [ 41%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_pass PASSED [ 42%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_fail_2_terms PASSED [ 42%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_fail PASSED [ 42%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_nested_pass PASSED [ 43%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_nested_fail PASSED [ 43%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_fail_identical_operators PASSED [ 44%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_assumption_pass PASSED [ 44%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_pass_ladder PASSED [ 44%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_fail_ladder PASSED [ 45%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_pass_ladder_3_terms PASSED [ 45%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_fail_ladder_3_terms PASSED [ 46%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_pass_ladder_pauli PASSED [ 46%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_simple_fail_ladder_pauli PASSED [ 46%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_scalar_mul_pass PASSED [ 47%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_scalar_mul_fail PASSED [ 47%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_scalar_mul_pass_with_ladder PASSED [ 48%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_scalar_mul_fail_with_ladder PASSED [ 48%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_scalar_mul_fail_duplicate PASSED [ 48%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_scalar_mul_fail_duplicate_more_terms PASSED [ 49%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_scalar_mul_fail_duplicate_complex PASSED [ 49%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationSortedOrder::test_nested_fail_duplicate PASSED [ 50%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationScaleTerms::test_simple_addition_pass PASSED [ 50%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationScaleTerms::test_simple_addition_fail PASSED [ 51%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationScaleTerms::test_single_pass PASSED [ 51%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationScaleTerms::test_single_fail PASSED [ 51%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationScaleTerms::test_complicated_addition_pass PASSED [ 52%]
tests/test_analog/test_canonicalization_verification.py::TestCanonicalizationVerificationScaleTerms::test_complicated_addition_fail PASSED [ 52%]
tests/test_analog/test_mathexpr.py::test_math_expressions[3+5-8] PASSED  [ 53%]
tests/test_analog/test_mathexpr.py::test_math_expressions[3.02+5.01-8.03] PASSED [ 53%]
tests/test_analog/test_mathexpr.py::test_math_expressions[3-5--2] PASSED [ 53%]
tests/test_analog/test_mathexpr.py::test_math_expressions[-3.02+5.01-1.99] PASSED [ 54%]
tests/test_analog/test_mathexpr.py::test_math_expressions[3*5-15] PASSED [ 54%]
tests/test_analog/test_mathexpr.py::test_math_expressions[15/2-7.5] PASSED [ 55%]
tests/test_analog/test_mathexpr.py::test_math_expressions[3**2.01-9.1] PASSED [ 55%]
tests/test_analog/test_mathexpr.py::test_math_expressions[sin(0.25)-0.2474] PASSED [ 55%]
tests/test_analog/test_mathexpr.py::test_math_expressions[tan(0.205)-0.208] PASSED [ 56%]
tests/test_analog/test_mathexpr.py::test_math_expressions[2*3 + 5*(1j)-(6+5j)] PASSED [ 56%]
tests/test_analog/test_mathexpr.py::test_math_expressions[1+2*3 + 9 - 0.1 + 7*(2+3*5+(10/3))-158.233] PASSED [ 57%]
tests/test_analog/test_mathexpr.py::test_math_expressions[sin(exp(2))-0.894] PASSED [ 57%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_add_V PASSED [ 57%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_operator_multiply_V PASSED [ 58%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_left_multiplication_V PASSED [ 58%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_left_multiple_multiplication_V PASSED [ 59%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_right_multiplication_V PASSED [ 59%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_right_multiple_multiplication_V PASSED [ 59%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_multiplication_with_addition_V PASSED [ 60%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_multiplication_nested_l1_V PASSED [ 60%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_multiplication_nested_l2_V PASSED [ 61%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_scalar_string_nested_float_combination_V PASSED [ 61%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_kron_with_addition_V PASSED [ 61%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_string_left_multiplication_V PASSED [ 62%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_string_right_multiplication_V PASSED [ 62%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_string_left_right_multiplication_V PASSED [ 63%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_string_left_right_multiplication_nested_V PASSED [ 63%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_minus_string_V PASSED [ 63%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_multiple_minus_V PASSED [ 64%]
tests/test_analog/test_operator.py::TestRealFinalStringVerbosePrintOp::test_pauli_multiple_minus_nested_V SKIPPED [ 64%]
tests/test_analog/test_operator.py::TestComplexFinalStringVerbosePrintOp::test_pauli_left_img_V PASSED [ 65%]
tests/test_analog/test_operator.py::TestComplexFinalStringVerbosePrintOp::test_pauli_right_img_V PASSED [ 65%]
tests/test_analog/test_operator.py::TestComplexFinalStringVerbosePrintOp::test_pauli_nested_img_V PASSED [ 65%]
tests/test_analog/test_operator.py::TestHilbertSpaceDimVerification::test_simple_addition_fail PASSED [ 66%]
tests/test_analog/test_operator.py::TestHilbertSpaceDimVerification::test_simple_addition_pass_single PASSED [ 66%]
tests/test_analog/test_operator.py::TestHilbertSpaceDimVerification::test_simple_addition_fail_single_with_ladder PASSED [ 67%]
tests/test_analog/test_operator.py::TestHilbertSpaceDimVerification::test_simple_addition_fail_ladder PASSED [ 67%]
tests/test_analog/test_operator.py::TestHilbertSpaceDimVerification::test_simple_addition_pass_ladder PASSED [ 67%]
tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian0-XX_Gate-True-expected_weights0] FAILED [ 68%]
tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian1-Weighted_XX_Gate-True-expected_weights1] FAILED [ 68%]
tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian2-XY_Gate-False-None] PASSED [ 69%]
tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian3-XZ_Gate-False-None] PASSED [ 69%]
tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian4-YY_Gate-False-None] PASSED [ 69%]
tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian5-ZZ_Gate-False-None] PASSED [ 70%]
tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian6-II_Gate-False-None] PASSED [ 70%]
tests/test_analog/test_xx_analysis.py::test_3qubit_combinations[hamiltonian0-XXX_Gate] PASSED [ 71%]
tests/test_analog/test_xx_analysis.py::test_3qubit_combinations[hamiltonian1-XXY_Gate] PASSED [ 71%]
tests/test_analog/test_xx_analysis.py::test_3qubit_combinations[hamiltonian2-XYZ_Gate] PASSED [ 71%]
tests/test_analog/test_xx_analysis.py::test_time_dependent[hamiltonian0-Time_Dependent_XX] PASSED [ 72%]
tests/test_analog/test_xx_analysis.py::test_time_dependent[hamiltonian1-Time_Dependent_2tXX] PASSED [ 72%]
tests/test_analog/test_xx_analysis.py::test_complex_circuits[hamiltonians0-Multiple_XX_Gates-True] FAILED [ 73%]
tests/test_analog/test_xx_analysis.py::test_complex_circuits[hamiltonians1-Mixed_XX_YY_Gates-False] PASSED [ 73%]
tests/test_analog/test_xx_analysis.py::test_complex_circuits[hamiltonians2-Mixed_XX_XXX_Gates-False] PASSED [ 73%]
tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian0-XX_plus_II-False] FAILED [ 74%]
tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian1-XX_plus_XX-True] FAILED [ 74%]
tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian2-XX_plus_II-False] FAILED [ 75%]
tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian3-XX_plus_XX-True] FAILED [ 75%]
tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian4-XX_plus_YY-False] PASSED [ 75%]
tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian5-XX_plus_YZ-False] PASSED [ 76%]
tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian6-XX_plus_ZZ-False] PASSED [ 76%]
tests/test_analog/test_xx_analysis.py::test_with_ladder_operators PASSED [ 77%]
tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian0-XX_Gate-True-expected_weights0] FAILED [ 77%]
tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian1-Weighted_XX_Gate-True-expected_weights1] PASSED [ 77%]
tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian2-XY_Gate-False-None] PASSED [ 78%]
tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian3-XZ_Gate-False-None] PASSED [ 78%]
tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian4-YY_Gate-False-None] PASSED [ 79%]
tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian5-ZZ_Gate-False-None] PASSED [ 79%]
tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian6-II_Gate-False-None] PASSED [ 79%]
tests/test_analog/test_xx_analysis_v2.py::test_3qubit_combinations[hamiltonian0-XXX_Gate] PASSED [ 80%]
tests/test_analog/test_xx_analysis_v2.py::test_3qubit_combinations[hamiltonian1-XXY_Gate] PASSED [ 80%]
tests/test_analog/test_xx_analysis_v2.py::test_3qubit_combinations[hamiltonian2-XYZ_Gate] PASSED [ 81%]
tests/test_analog/test_xx_analysis_v2.py::test_time_dependent[hamiltonian0-Time_Dependent_XX] PASSED [ 81%]
tests/test_analog/test_xx_analysis_v2.py::test_time_dependent[hamiltonian1-Time_Dependent_2tXX] PASSED [ 81%]
tests/test_analog/test_xx_analysis_v2.py::test_complex_circuits[hamiltonians0-Multiple_XX_Gates-True] FAILED [ 82%]
tests/test_analog/test_xx_analysis_v2.py::test_complex_circuits[hamiltonians1-Mixed_XX_YY_Gates-False] PASSED [ 82%]
tests/test_analog/test_xx_analysis_v2.py::test_complex_circuits[hamiltonians2-Mixed_XX_XXX_Gates-False] PASSED [ 83%]
tests/test_analog/test_xx_analysis_v2.py::test_multiple_xx_combinations[hamiltonian0-XX_plus_II-False] PASSED [ 83%]
tests/test_analog/test_xx_analysis_v2.py::test_multiple_xx_combinations[hamiltonian1-XX_plus_XX-True] PASSED [ 83%]
tests/test_analog/test_xx_analysis_v2.py::test_multiple_xx_combinations[hamiltonian2-XX_plus_II-False] PASSED [ 84%]
tests/test_analog/test_xx_analysis_v2.py::test_multiple_xx_combinations[hamiltonian3-XX_plus_XX-True] PASSED [ 84%]
tests/test_analog/test_xx_analysis_v2.py::test_multiple_xx_combinations[hamiltonian4-XX_plus_YY-False] PASSED [ 85%]
tests/test_analog/test_xx_analysis_v2.py::test_multiple_xx_combinations[hamiltonian5-XX_plus_YZ-False] PASSED [ 85%]
tests/test_analog/test_xx_analysis_v2.py::test_multiple_xx_combinations[hamiltonian6-XX_plus_ZZ-False] PASSED [ 85%]
tests/test_analog/test_xx_analysis_v2.py::test_with_ladder_operators PASSED [ 86%]
tests/test_serialization.py::test_serialize_deserialize[model0] PASSED   [ 86%]
tests/test_serialization.py::test_serialize_deserialize[model1] PASSED   [ 87%]
tests/test_serialization.py::test_serialize_deserialize[model2] PASSED   [ 87%]
tests/test_serialization.py::test_serialize_deserialize[model3] PASSED   [ 87%]
tests/test_serialization.py::test_serialize_deserialize[model4] PASSED   [ 88%]
tests/test_serialization.py::test_serialize_deserialize[model5] PASSED   [ 88%]
tests/test_serialization.py::test_serialize_deserialize[model6] PASSED   [ 89%]
tests/test_serialization.py::test_serialize_deserialize[model7] PASSED   [ 89%]
tests/test_serialization.py::test_serialize_deserialize[model8] PASSED   [ 89%]
tests/test_serialization.py::test_serialize_deserialize[model9] PASSED   [ 90%]
tests/test_serialization.py::test_serialize_deserialize[model10] PASSED  [ 90%]
tests/test_serialization.py::test_serialize_deserialize[model11] PASSED  [ 91%]
tests/test_serialization.py::test_serialize_deserialize[model12] PASSED  [ 91%]
tests/test_serialization.py::test_serialize_deserialize[model13] PASSED  [ 91%]
tests/test_serialization.py::test_serialize_deserialize[model14] PASSED  [ 92%]
tests/test_serialization.py::test_serialize_deserialize[model15] PASSED  [ 92%]
tests/test_serialization.py::test_serialize_deserialize[model16] PASSED  [ 93%]
tests/test_serialization.py::test_serialize_deserialize[model17] PASSED  [ 93%]
tests/test_serialization.py::test_serialize_deserialize[model18] PASSED  [ 93%]
tests/test_serialization.py::test_serialize_deserialize[model19] PASSED  [ 94%]
tests/test_serialization.py::test_serialize_deserialize[model20] PASSED  [ 94%]
tests/test_serialization.py::test_serialize_deserialize[model21] PASSED  [ 95%]
tests/test_serialization.py::test_serialize_deserialize[model22] PASSED  [ 95%]
tests/test_serialization.py::test_serialize_deserialize[model23] PASSED  [ 95%]
tests/test_serialization.py::test_serialize_deserialize[model24] PASSED  [ 96%]
tests/test_serialization.py::test_serialize_deserialize[model25] PASSED  [ 96%]
tests/test_serialization.py::test_serialize_deserialize[model26] PASSED  [ 97%]
tests/test_serialization.py::test_serialize_deserialize[model27] PASSED  [ 97%]
tests/test_serialization.py::test_serialize_deserialize[model28] PASSED  [ 97%]
tests/test_serialization.py::test_serialize_deserialize[model29] PASSED  [ 98%]
tests/test_serialization.py::test_serialize_deserialize[model30] PASSED  [ 98%]
tests/test_serialization.py::test_serialize_deserialize[model31] PASSED  [ 99%]
tests/test_serialization.py::test_serialize_deserialize[model32] PASSED  [ 99%]
tests/test_serialization.py::test_serialize_deserialize[model33] PASSED  [100%]

=================================== FAILURES ===================================
_____ test_pauli_combinations[hamiltonian0-XX_Gate-True-expected_weights0] _____

hamiltonian = OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX'))
name = 'XX_Gate', expected_compatible = True, expected_weights = [1.0]

    @pytest.mark.parametrize("hamiltonian,name,expected_compatible,expected_weights", [
        (X @ X, "XX_Gate", True, [1.0]),
        (2.0 * (X @ X), "Weighted_XX_Gate", True, [2.0]),
        (X @ Y, "XY_Gate", False, None),
        (X @ Z, "XZ_Gate", False, None),
        (Y @ Y, "YY_Gate", False, None),
        (Z @ Z, "ZZ_Gate", False, None),
        (I @ I, "II_Gate", False, None),
    
    ])
    def test_pauli_combinations(hamiltonian, name, expected_compatible, expected_weights):
        """Test different Pauli operator combinations"""
        # Create circuit
        circuit = create_test_circuit([hamiltonian])
        circuit.n_qreg = 2
    
        # Analyze with output capture
>       result, output = capture_output(analyze_xx_gates, circuit, verbose=True)

tests/test_analog/test_xx_analysis.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_analog/test_xx_analysis.py:49: in capture_output
    result = func(*args, **kwargs)
src/oqd_core/compiler/analog/passes/xx_analysis.py:258: in analyze_xx_gates
    jij_matrix = analyzer.extract_jij_matrix(circuit_size) if is_compatible else None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = XXGateAnalyzer(xx_gates=[AnalogGate(class_='AnalogGate', hamiltonian=OperatorScalarMul(class_='OperatorScalarMul', op=...on_xx_gate=False, has_time_dependence=False, has_ladder_operators=False, verbose=True, processed_ops={130201960801904})
circuit_size = 2

    def extract_jij_matrix(self, circuit_size):
        """
        Build a coupling matrix (Jij) from the detected XX gates.
    
        Args:
            circuit_size: Number of qubits in the circuit
    
        Returns:
            numpy.ndarray or None: Coupling matrix or None if circuit is incompatible
        """
        if not self.found_non_xx_gate or not self.xx_weights:
            if self.verbose:
>               print(f"Cannot create Jij matrix: is_compatible={self.is_compatible}, xx_weights={self.xx_weights}")
E               AttributeError: 'XXGateAnalyzer' object has no attribute 'is_compatible'

src/oqd_core/compiler/analog/passes/xx_analysis.py:207: AttributeError
_ test_pauli_combinations[hamiltonian1-Weighted_XX_Gate-True-expected_weights1] _

hamiltonian = OperatorScalarMul(class_='OperatorScalarMul', op=OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')), expr=MathNum(class_='MathNum', value=2.0))
name = 'Weighted_XX_Gate', expected_compatible = True, expected_weights = [2.0]

    @pytest.mark.parametrize("hamiltonian,name,expected_compatible,expected_weights", [
        (X @ X, "XX_Gate", True, [1.0]),
        (2.0 * (X @ X), "Weighted_XX_Gate", True, [2.0]),
        (X @ Y, "XY_Gate", False, None),
        (X @ Z, "XZ_Gate", False, None),
        (Y @ Y, "YY_Gate", False, None),
        (Z @ Z, "ZZ_Gate", False, None),
        (I @ I, "II_Gate", False, None),
    
    ])
    def test_pauli_combinations(hamiltonian, name, expected_compatible, expected_weights):
        """Test different Pauli operator combinations"""
        # Create circuit
        circuit = create_test_circuit([hamiltonian])
        circuit.n_qreg = 2
    
        # Analyze with output capture
>       result, output = capture_output(analyze_xx_gates, circuit, verbose=True)

tests/test_analog/test_xx_analysis.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_analog/test_xx_analysis.py:49: in capture_output
    result = func(*args, **kwargs)
src/oqd_core/compiler/analog/passes/xx_analysis.py:258: in analyze_xx_gates
    jij_matrix = analyzer.extract_jij_matrix(circuit_size) if is_compatible else None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = XXGateAnalyzer(xx_gates=[AnalogGate(class_='AnalogGate', hamiltonian=OperatorScalarMul(class_='OperatorScalarMul', op=...on_xx_gate=False, has_time_dependence=False, has_ladder_operators=False, verbose=True, processed_ops={130201959242144})
circuit_size = 2

    def extract_jij_matrix(self, circuit_size):
        """
        Build a coupling matrix (Jij) from the detected XX gates.
    
        Args:
            circuit_size: Number of qubits in the circuit
    
        Returns:
            numpy.ndarray or None: Coupling matrix or None if circuit is incompatible
        """
        if not self.found_non_xx_gate or not self.xx_weights:
            if self.verbose:
>               print(f"Cannot create Jij matrix: is_compatible={self.is_compatible}, xx_weights={self.xx_weights}")
E               AttributeError: 'XXGateAnalyzer' object has no attribute 'is_compatible'

src/oqd_core/compiler/analog/passes/xx_analysis.py:207: AttributeError
_________ test_complex_circuits[hamiltonians0-Multiple_XX_Gates-True] __________

hamiltonians = [OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')), OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX'))]
name = 'Multiple_XX_Gates', expected_compatible = True

    @pytest.mark.parametrize("hamiltonians,name,expected_compatible", [
        ([X @ X, X @ X], "Multiple_XX_Gates", True),
        ([X @ X, Y @ Y], "Mixed_XX_YY_Gates", False),
        ([X @ X, X @ X @ X], "Mixed_XX_XXX_Gates", False),
    ])
    def test_complex_circuits(hamiltonians, name, expected_compatible):
        """Test more complex circuit structures"""
        # Create circuit
        circuit = create_test_circuit(hamiltonians)
        circuit.n_qreg = 3 if any(isinstance(h, (X @ X @ X).__class__) for h in hamiltonians) else 2
    
        # Analyze with output capture
        result, output = capture_output(analyze_xx_gates, circuit, verbose=True)
        is_compatible, xx_gates, xx_weights, jij_matrix = result
    
        # Check compatibility
>       assert is_compatible == expected_compatible, f"Expected compatibility {expected_compatible}, got {is_compatible}"
E       AssertionError: Expected compatibility True, got False
E       assert False == True

tests/test_analog/test_xx_analysis.py:160: AssertionError
_________ test_multiple_xx_combinations[hamiltonian0-XX_plus_II-False] _________

hamiltonian = OperatorAdd(class_='OperatorAdd', op1=OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')), op2=OperatorKron(class_='OperatorKron', op1=PauliI(class_='PauliI'), op2=PauliI(class_='PauliI')))
name = 'XX_plus_II', expected_compatible = False

    @pytest.mark.parametrize("hamiltonian,name,expected_compatible", [
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + Y @ Y, "XX_plus_YY", False),  # Mixed terms
        (X @ X + Y @ Z, "XX_plus_YZ", False),  # Mixed terms
        (X @ X + Z @ Z, "XX_plus_ZZ", False),  # Mixed terms
    ])
    def test_multiple_xx_combinations(hamiltonian, name, expected_compatible):
        """Test circuits with multiple XX gate combinations."""
        # Create circuit
        circuit = create_test_circuit([hamiltonian])
        circuit.n_qreg = 2
    
        # Analyze with output capture
>       result, output = capture_output(analyze_xx_gates, circuit, verbose=True)

tests/test_analog/test_xx_analysis.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_analog/test_xx_analysis.py:49: in capture_output
    result = func(*args, **kwargs)
src/oqd_core/compiler/analog/passes/xx_analysis.py:258: in analyze_xx_gates
    jij_matrix = analyzer.extract_jij_matrix(circuit_size) if is_compatible else None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = XXGateAnalyzer(xx_gates=[AnalogGate(class_='AnalogGate', hamiltonian=OperatorAdd(class_='OperatorAdd', op1=OperatorSca... has_time_dependence=False, has_ladder_operators=False, verbose=True, processed_ops={130201957881552, 130201958013904})
circuit_size = 2

    def extract_jij_matrix(self, circuit_size):
        """
        Build a coupling matrix (Jij) from the detected XX gates.
    
        Args:
            circuit_size: Number of qubits in the circuit
    
        Returns:
            numpy.ndarray or None: Coupling matrix or None if circuit is incompatible
        """
        if not self.found_non_xx_gate or not self.xx_weights:
            if self.verbose:
>               print(f"Cannot create Jij matrix: is_compatible={self.is_compatible}, xx_weights={self.xx_weights}")
E               AttributeError: 'XXGateAnalyzer' object has no attribute 'is_compatible'

src/oqd_core/compiler/analog/passes/xx_analysis.py:207: AttributeError
_________ test_multiple_xx_combinations[hamiltonian1-XX_plus_XX-True] __________

hamiltonian = OperatorAdd(class_='OperatorAdd', op1=OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')), op2=OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')))
name = 'XX_plus_XX', expected_compatible = True

    @pytest.mark.parametrize("hamiltonian,name,expected_compatible", [
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + Y @ Y, "XX_plus_YY", False),  # Mixed terms
        (X @ X + Y @ Z, "XX_plus_YZ", False),  # Mixed terms
        (X @ X + Z @ Z, "XX_plus_ZZ", False),  # Mixed terms
    ])
    def test_multiple_xx_combinations(hamiltonian, name, expected_compatible):
        """Test circuits with multiple XX gate combinations."""
        # Create circuit
        circuit = create_test_circuit([hamiltonian])
        circuit.n_qreg = 2
    
        # Analyze with output capture
>       result, output = capture_output(analyze_xx_gates, circuit, verbose=True)

tests/test_analog/test_xx_analysis.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_analog/test_xx_analysis.py:49: in capture_output
    result = func(*args, **kwargs)
src/oqd_core/compiler/analog/passes/xx_analysis.py:258: in analyze_xx_gates
    jij_matrix = analyzer.extract_jij_matrix(circuit_size) if is_compatible else None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = XXGateAnalyzer(xx_gates=[AnalogGate(class_='AnalogGate', hamiltonian=OperatorScalarMul(class_='OperatorScalarMul', op=...on_xx_gate=False, has_time_dependence=False, has_ladder_operators=False, verbose=True, processed_ops={130201957714992})
circuit_size = 2

    def extract_jij_matrix(self, circuit_size):
        """
        Build a coupling matrix (Jij) from the detected XX gates.
    
        Args:
            circuit_size: Number of qubits in the circuit
    
        Returns:
            numpy.ndarray or None: Coupling matrix or None if circuit is incompatible
        """
        if not self.found_non_xx_gate or not self.xx_weights:
            if self.verbose:
>               print(f"Cannot create Jij matrix: is_compatible={self.is_compatible}, xx_weights={self.xx_weights}")
E               AttributeError: 'XXGateAnalyzer' object has no attribute 'is_compatible'

src/oqd_core/compiler/analog/passes/xx_analysis.py:207: AttributeError
_________ test_multiple_xx_combinations[hamiltonian2-XX_plus_II-False] _________

hamiltonian = OperatorAdd(class_='OperatorAdd', op1=OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')), op2=OperatorKron(class_='OperatorKron', op1=PauliI(class_='PauliI'), op2=PauliI(class_='PauliI')))
name = 'XX_plus_II', expected_compatible = False

    @pytest.mark.parametrize("hamiltonian,name,expected_compatible", [
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + Y @ Y, "XX_plus_YY", False),  # Mixed terms
        (X @ X + Y @ Z, "XX_plus_YZ", False),  # Mixed terms
        (X @ X + Z @ Z, "XX_plus_ZZ", False),  # Mixed terms
    ])
    def test_multiple_xx_combinations(hamiltonian, name, expected_compatible):
        """Test circuits with multiple XX gate combinations."""
        # Create circuit
        circuit = create_test_circuit([hamiltonian])
        circuit.n_qreg = 2
    
        # Analyze with output capture
>       result, output = capture_output(analyze_xx_gates, circuit, verbose=True)

tests/test_analog/test_xx_analysis.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_analog/test_xx_analysis.py:49: in capture_output
    result = func(*args, **kwargs)
src/oqd_core/compiler/analog/passes/xx_analysis.py:258: in analyze_xx_gates
    jij_matrix = analyzer.extract_jij_matrix(circuit_size) if is_compatible else None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = XXGateAnalyzer(xx_gates=[AnalogGate(class_='AnalogGate', hamiltonian=OperatorAdd(class_='OperatorAdd', op1=OperatorSca... has_time_dependence=False, has_ladder_operators=False, verbose=True, processed_ops={130201959384000, 130201958009344})
circuit_size = 2

    def extract_jij_matrix(self, circuit_size):
        """
        Build a coupling matrix (Jij) from the detected XX gates.
    
        Args:
            circuit_size: Number of qubits in the circuit
    
        Returns:
            numpy.ndarray or None: Coupling matrix or None if circuit is incompatible
        """
        if not self.found_non_xx_gate or not self.xx_weights:
            if self.verbose:
>               print(f"Cannot create Jij matrix: is_compatible={self.is_compatible}, xx_weights={self.xx_weights}")
E               AttributeError: 'XXGateAnalyzer' object has no attribute 'is_compatible'

src/oqd_core/compiler/analog/passes/xx_analysis.py:207: AttributeError
_________ test_multiple_xx_combinations[hamiltonian3-XX_plus_XX-True] __________

hamiltonian = OperatorAdd(class_='OperatorAdd', op1=OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')), op2=OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')))
name = 'XX_plus_XX', expected_compatible = True

    @pytest.mark.parametrize("hamiltonian,name,expected_compatible", [
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + I @ I, "XX_plus_II", False),  # Not pure XX
        (X @ X + X @ X, "XX_plus_XX", True),   # Can be simplified to 2 * (X @ X)
        (X @ X + Y @ Y, "XX_plus_YY", False),  # Mixed terms
        (X @ X + Y @ Z, "XX_plus_YZ", False),  # Mixed terms
        (X @ X + Z @ Z, "XX_plus_ZZ", False),  # Mixed terms
    ])
    def test_multiple_xx_combinations(hamiltonian, name, expected_compatible):
        """Test circuits with multiple XX gate combinations."""
        # Create circuit
        circuit = create_test_circuit([hamiltonian])
        circuit.n_qreg = 2
    
        # Analyze with output capture
>       result, output = capture_output(analyze_xx_gates, circuit, verbose=True)

tests/test_analog/test_xx_analysis.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_analog/test_xx_analysis.py:49: in capture_output
    result = func(*args, **kwargs)
src/oqd_core/compiler/analog/passes/xx_analysis.py:258: in analyze_xx_gates
    jij_matrix = analyzer.extract_jij_matrix(circuit_size) if is_compatible else None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = XXGateAnalyzer(xx_gates=[AnalogGate(class_='AnalogGate', hamiltonian=OperatorScalarMul(class_='OperatorScalarMul', op=...on_xx_gate=False, has_time_dependence=False, has_ladder_operators=False, verbose=True, processed_ops={130201958994864})
circuit_size = 2

    def extract_jij_matrix(self, circuit_size):
        """
        Build a coupling matrix (Jij) from the detected XX gates.
    
        Args:
            circuit_size: Number of qubits in the circuit
    
        Returns:
            numpy.ndarray or None: Coupling matrix or None if circuit is incompatible
        """
        if not self.found_non_xx_gate or not self.xx_weights:
            if self.verbose:
>               print(f"Cannot create Jij matrix: is_compatible={self.is_compatible}, xx_weights={self.xx_weights}")
E               AttributeError: 'XXGateAnalyzer' object has no attribute 'is_compatible'

src/oqd_core/compiler/analog/passes/xx_analysis.py:207: AttributeError
_____ test_pauli_combinations[hamiltonian0-XX_Gate-True-expected_weights0] _____

hamiltonian = OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX'))
name = 'XX_Gate', expected_compatible = True, expected_weights = [1.0]

    @pytest.mark.parametrize("hamiltonian,name,expected_compatible,expected_weights", [
        (X @ X, "XX_Gate", True, [1.0]),
        (2.0 * (X @ X), "Weighted_XX_Gate", True, [2.0]),
        (X @ Y, "XY_Gate", False, None),
        (X @ Z, "XZ_Gate", False, None),
        (Y @ Y, "YY_Gate", False, None),
        (Z @ Z, "ZZ_Gate", False, None),
        (I @ I, "II_Gate", False, None),
    
    ])
    def test_pauli_combinations(hamiltonian, name, expected_compatible, expected_weights):
        """Test different Pauli operator combinations"""
        # Create circuit
        circuit = create_test_circuit([hamiltonian])
        circuit.n_qreg = 2
    
        # Analyze with output capture
        result, output = capture_output(analyze_xx_gates, circuit, verbose=True)
        is_compatible, xx_gates, xx_weights, jij_matrix = result
    
        # Basic assertions to be reported in pytest output
>       assert is_compatible == expected_compatible, f"Expected compatibility {expected_compatible}, got {is_compatible}"
E       AssertionError: Expected compatibility True, got False
E       assert False == True

tests/test_analog/test_xx_analysis_v2.py:87: AssertionError
_________ test_complex_circuits[hamiltonians0-Multiple_XX_Gates-True] __________

hamiltonians = [OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX')), OperatorKron(class_='OperatorKron', op1=PauliX(class_='PauliX'), op2=PauliX(class_='PauliX'))]
name = 'Multiple_XX_Gates', expected_compatible = True

    @pytest.mark.parametrize("hamiltonians,name,expected_compatible", [
        ([X @ X, X @ X], "Multiple_XX_Gates", True),
        ([X @ X, Y @ Y], "Mixed_XX_YY_Gates", False),
        ([X @ X, X @ X @ X], "Mixed_XX_XXX_Gates", False),
    ])
    def test_complex_circuits(hamiltonians, name, expected_compatible):
        """Test more complex circuit structures"""
        # Create circuit
        circuit = create_test_circuit(hamiltonians)
        circuit.n_qreg = 3 if any(isinstance(h, (X @ X @ X).__class__) for h in hamiltonians) else 2
    
        # Analyze with output capture
        result, output = capture_output(analyze_xx_gates, circuit, verbose=True)
        is_compatible, xx_gates, xx_weights, jij_matrix = result
    
        # Check compatibility
>       assert is_compatible == expected_compatible, f"Expected compatibility {expected_compatible}, got {is_compatible}"
E       AssertionError: Expected compatibility True, got False
E       assert False == True

tests/test_analog/test_xx_analysis_v2.py:160: AssertionError
=========================== short test summary info ============================
FAILED tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian0-XX_Gate-True-expected_weights0]
FAILED tests/test_analog/test_xx_analysis.py::test_pauli_combinations[hamiltonian1-Weighted_XX_Gate-True-expected_weights1]
FAILED tests/test_analog/test_xx_analysis.py::test_complex_circuits[hamiltonians0-Multiple_XX_Gates-True]
FAILED tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian0-XX_plus_II-False]
FAILED tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian1-XX_plus_XX-True]
FAILED tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian2-XX_plus_II-False]
FAILED tests/test_analog/test_xx_analysis.py::test_multiple_xx_combinations[hamiltonian3-XX_plus_XX-True]
FAILED tests/test_analog/test_xx_analysis_v2.py::test_pauli_combinations[hamiltonian0-XX_Gate-True-expected_weights0]
FAILED tests/test_analog/test_xx_analysis_v2.py::test_complex_circuits[hamiltonians0-Multiple_XX_Gates-True]
============= 9 failed, 238 passed, 1 skipped, 1 xfailed in 0.49s ==============
